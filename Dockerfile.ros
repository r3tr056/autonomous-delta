###############################################################################
# Build-time arguments
###############################################################################
ARG ROS_DISTRO=jazzy            # e.g. humble/iron/jazzy
ARG UBUNTU_VERSION=24.04        # kept for possible future apt mirrors

###############################################################################
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Base stage â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
###############################################################################
FROM ros:${ROS_DISTRO}-ros-base AS base
ARG ROS_DISTRO
ENV DEBIAN_FRONTEND=noninteractive

# ---------- OS packages ----------
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    # build tools
    build-essential cmake git curl wget unzip \
    # Python build helpers
    python3-dev python3-pip python3-venv python3-setuptools python3-wheel \
    # colcon / rosdep
    python3-colcon-common-extensions python3-colcon-mixin \
    python3-rosdep python3-vcstool \
    # vision libs
    libopencv-dev python3-opencv \
    libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
    # usb / udev
    libudev-dev libusb-1.0-0-dev \
    # joystick
    joystick jstest-gtk \
    # misc
    nano htop tree \
    && rm -rf /var/lib/apt/lists/*

# ---------- Binary ROS 2 packages ----------
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-cv-bridge \
    ros-${ROS_DISTRO}-vision-msgs \
    ros-${ROS_DISTRO}-image-transport \
    ros-${ROS_DISTRO}-compressed-image-transport \
    ros-${ROS_DISTRO}-joy \
    ros-${ROS_DISTRO}-teleop-twist-joy \
    ros-${ROS_DISTRO}-robot-state-publisher \
    ros-${ROS_DISTRO}-joint-state-publisher \
    ros-${ROS_DISTRO}-joint-state-publisher-gui \
    ros-${ROS_DISTRO}-xacro \
    ros-${ROS_DISTRO}-tf2-ros ros-${ROS_DISTRO}-tf2-tools \
    ros-${ROS_DISTRO}-rviz2 ros-${ROS_DISTRO}-rqt ros-${ROS_DISTRO}-rqt-common-plugins \
    && rm -rf /var/lib/apt/lists/*

# ---------- micro-ROS agent (ignore failure on x86) ----------
RUN apt-get update && \
    (apt-get install -y ros-${ROS_DISTRO}-micro-ros-agent || true) && \
    rm -rf /var/lib/apt/lists/*

# ---------- rosdep init ----------
RUN rosdep init 2>/dev/null || true && rosdep update

###############################################################################
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Python-deps stage â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
###############################################################################
FROM base AS python-deps

# Upgrade pip and install PyPI packages in the global site-packages
RUN python3 -m pip install --break-system-packages --ignore-installed --upgrade pip && \
    python3 -m pip install  --break-system-packages --ignore-installed \
        numpy scipy opencv-python ultralytics pillow matplotlib pandas tqdm \
        pyyaml catkin_pkg && \
    # Picamera2 only builds on Raspberry Pi; ignore failure elsewhere
    (python3 -m pip install --break-system-packages --ignore-installed picamera2 || true)

###############################################################################
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Workspace-build stage â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
###############################################################################
FROM python-deps AS workspace-build
WORKDIR /opt/delta_robot_ws

# copy the whole workspace (better caching: copy files that rarely change first)
COPY ros2_ws/src  ./src

# install apt dependencies via rosdep
RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && \
     rosdep install --from-paths src --ignore-src -r -y"

# build
RUN /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash && \
     colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release"

###############################################################################
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Runtime (final) stage â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
###############################################################################
FROM python-deps AS runtime
ARG ROS_DISTRO
# copy workspace
COPY --from=workspace-build /opt/delta_robot_ws /opt/delta_robot_ws
WORKDIR /opt/delta_robot_ws

# helper / entrypoint
COPY --chmod=755 <<'EOF' /entrypoint.sh
#!/usr/bin/env bash
set -e
source /opt/ros/${ROS_DISTRO}/setup.bash
source /opt/delta_robot_ws/install/setup.bash

export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
export DISPLAY=${DISPLAY:-:0}

alias delta_build='cd /opt/delta_robot_ws && colcon build --symlink-install && source install/setup.bash'
alias delta_sim='ros2 launch delta_robot_bringup simulation.launch.py'
alias delta_hw='ros2 launch delta_robot_bringup system.launch.py simulation_mode:=false'

echo -e "\nðŸ¤–  Delta-Robot container ready!"
echo "â€¢ delta_sim  â€“ run simulation"
echo "â€¢ delta_hw   â€“ run hardware"
echo "â€¢ delta_buildâ€“ rebuild workspace"
echo

exec "$@"
EOF

ENV ROS_WORKSPACE=/opt/delta_robot_ws
ENV PYTHONPATH=/opt/delta_robot_ws/install/lib/python3.12/site-packages:$PYTHONPATH

# non-root user (uid 1000)
RUN groupadd -g 1000 delta && \
    useradd  -u 1000 -g delta -m -s /bin/bash delta && \
    usermod  -a -G dialout delta && \
    chown -R delta:delta /opt/delta_robot_ws
USER delta

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]

# optional ports & labels
EXPOSE 11811 11888
LABEL org.opencontainers.image.title="Delta Robot ROS 2 Environment" \
      org.opencontainers.image.version="1.0.0" \
      maintainer="retro <dangerankur56@gmail.com>"
